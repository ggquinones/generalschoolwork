
public class Problem4 
{

	public static void main(String[] args) 
	{
		
		RKF_Method(1.0,3.0,-2.0,Math.pow(10, -6),0.5,0.02);
	}

	
	//Inputs: endpoints a,b; initial condition ALPHA; tolerance TOL; maximum step size hmax; minimum step size hmin
	//Outputs: Table of every node in the calculation including: time, Step (h), Approximation (w), Exact Value at t, and the Absolute Error at t( |Exact=-Approximation| )
		static void RKF_Method(double A , double B, double ALPHA, double TOL, double HMAX, double HMIN)
		{
			//Step 1
			double t,w,h,R,DELTA;
			double [] K=new double[6];
			int FLAG =1;
			t=A;
			w=ALPHA;
			double actualError = Math.abs(ACTUAL(t) - w);
			h=HMAX;
			System.out.println("  time \t\t  Step (h)\tApproximation(w)\t Exact Value \t\t Actual Error");
			System.out.printf("%.8f \t\t    \t %.8f \t %.8f \t \t %.8f \n",t,w,ACTUAL(t),actualError);
			
			// Step 2
			while(FLAG==1) 
			{
				// Step 3
				K[0] = h*func(t,w);
				K[1] = h*func(t + (1/4.0)*h , w + (1/4.0)*K[0] );
				K[2] = h*func(t + (3/8.0)*h , w + (3/32.0)*K[0] + (9/32.0)*K[1] );
				K[3] = h*func(t + (12/13.0)*h, w + (1932/2197.0)*K[0] - (7200/2197.0)*K[1] + (7296/2197.0)*K[2]);
				K[4] = h*func(t + h, w + (439/216.0)*K[0] - 8*K[1] + (3680/513.0)*K[2] - (845/4104.0)*K[3] );
				K[5] = h*func(t + (1/2.0)*h, w - (8/27.0)*K[0] + 2*K[1] - (3544/2565.0)*K[2] + (1859/4104.0)*K[3] - (11/40.0)*K[4] );
				
				/*for(int i =0;i<K.length;i++)
				{
					System.out.printf("K[%d] = %f \n",i,K[i]);
				}*/
				
				// Step 4
				R= (1/h)*Math.abs( (1/360.0)*K[0] - (128/4275.0)*K[2] - (2197/75240.0)*K[3] + (1/50.0)*K[4] + (2/55.0)*K[5]);
				
				// Step 5
				if(R <= TOL)
				{
					// bits commented out are used in problem 2
					// Step 6
					t += h;
					w = w + (25/216.0)*K[0] + (1408/2565.0)* K[2] + (2197/4104.0)*K[3] - (1/5.0)*K[4];
					// Step 7
					 actualError = Math.abs(ACTUAL(t) - w);
					System.out.printf("%.8f \t %.8f \t %.8f \t %.8f \t\t %.8f \n",t,h,w,ACTUAL(t),actualError);
					//System.out.printf("%.8f \t %.8f \t %.8f \t \n",t,h,w);
				}
				// Step 8
				DELTA = .84*Math.pow((TOL/R) , .25);
				
				// Step 9 
				if(DELTA <= 0.1)
				{
					h *= 0.1;
				}
				else if(DELTA >= 4.0)
				{
					h *= 4.0;				
				}
				else
				{
					h *= DELTA;
				}
				
				// Step 10
				if(h > HMAX)
				{
					h = HMAX;
				}
				
				// Step 11
				if(t >= B)
				{
					FLAG =0;
				}
				else if( (t+h) > B)
				{
					h = B - t;
				}
				else if(h < HMIN)
				{
					FLAG =0;
					System.out.println("-------Minimum H Exceeded-------");
					System.out.println("------Procedure Unsuccessful------");
				}
			}
		} // END RKF_METHOD
		
		
		static void RK_Method(double a, double b, int N, double ALPHA)
		{
			// step 1
			double k1,k2,k3,k4;
			double h=(b-a)/N;
			double t=a;
			double w = ALPHA;
			System.out.println("  t \t     w");
			System.out.printf(" %.2f \t %.7f \n", t,w);
			for(int i=1;i<=N;i++)
			{
				k1 = h* func(t,w);
				k2 = h* func(t + (h/2), w+(k1/2));
				k3 = h* func(t + (h/2), w+(k2/2));
				k4 = h* func( t + h, w + k3);
				
				w= w + ((k1+2*k2+2*k3+k4)/6);
				t = a+i*h;
				System.out.printf(" %.2f \t %.7f \n", t,w);
			}
		}
		
		
		
		// Function of y prime used in RKF and RK Methods
		static double func(double t,double y)
		{
			return (((y*y) + y)/(t));
		}
		
		// Exact solution used in RKF and RK Methods
		static double ACTUAL(double x)
		{
			return ((2*x)/(1 - 2*x));
		}
		
		
		
		
}
